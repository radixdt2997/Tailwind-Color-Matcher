Directory structure:
└── src/
    ├── app.css
    ├── app.d.ts
    ├── app.html
    ├── demo.spec.ts
    ├── lib/
    │   ├── assets/
    │   ├── components/
    │   │   ├── ColorInput.svelte
    │   │   ├── ColorMatch.svelte
    │   │   ├── MultipleMatches.svelte
    │   │   └── main/
    │   │       ├── EmptyState.svelte
    │   │       ├── Footer.svelte
    │   │       └── Header.svelte
    │   ├── types/
    │   │   └── color.ts
    │   └── utils/
    │       ├── colorConversion.ts
    │       ├── colorMatching.ts
    │       ├── colorValidation.ts
    │       ├── constants.ts
    │       └── tailwindColors.ts
    └── routes/
        ├── +layout.svelte
        ├── +layout.ts
        ├── +page.svelte
        ├── +page.ts
        ├── page.svelte.spec.ts
        ├── about/
        │   ├── +page.svelte
        │   └── +page.ts
        ├── robots.txt/
        │   └── +server.ts
        └── sitemap.xml/
            └── +server.ts

================================================
File: app.css
================================================
@import 'tailwindcss';



================================================
File: app.d.ts
================================================
// See https://svelte.dev/docs/kit/types#app.d.ts
// for information about these interfaces
declare global {
	namespace App {
		// interface Error {}
		// interface Locals {}
		// interface PageData {}
		// interface PageState {}
		// interface Platform {}
	}
}

export {};



================================================
File: app.html
================================================
<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />

		<!-- Primary Meta Tags -->
		<title>%sveltekit.title%</title>
		<meta name="title" content="%sveltekit.title%" />
		<meta name="description" content="%sveltekit.description%" />
		<meta
			name="keywords"
			content="tailwind css, color matcher, hex to tailwind, color converter, design tools, css colors, tailwind colors, color palette, web development, frontend tools"
		/>
		<meta name="author" content="Shrey Purohit" />
		<meta name="robots" content="index, follow" />
		<meta name="language" content="English" />
		<meta name="revisit-after" content="7 days" />

		<!-- Canonical URL -->
		<link rel="canonical" href="%sveltekit.url%" />

		<!-- Open Graph / Facebook -->
		<meta property="og:type" content="website" />
		<meta property="og:url" content="%sveltekit.url%" />
		<meta property="og:title" content="%sveltekit.title%" />
		<meta property="og:description" content="%sveltekit.description%" />
		<meta property="og:image" content="%sveltekit.assets%/og-image.png" />
		<meta property="og:site_name" content="Tailwind Color Matcher" />
		<meta property="og:locale" content="en_US" />

		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content="%sveltekit.url%" />
		<meta property="twitter:title" content="%sveltekit.title%" />
		<meta property="twitter:description" content="%sveltekit.description%" />
		<meta property="twitter:image" content="%sveltekit.assets%/og-image.png" />
		<meta property="twitter:creator" content="@ShreyPurohit" />

		<!-- Favicon and Icons -->
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
		<link rel="manifest" href="/site.webmanifest" />
		<meta name="theme-color" content="#3b82f6" />
		<meta name="msapplication-TileColor" content="#3b82f6" />

		<!-- Preconnect to external domains -->
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

		<!-- JSON-LD Structured Data -->
		<script type="application/ld+json">
			{
				"@context": "https://schema.org",
				"@type": "WebApplication",
				"name": "Tailwind Color Matcher",
				"description": "Find the closest Tailwind CSS color to any hex color code. Perfect for maintaining design consistency with Tailwind's color palette.",
				"url": "%sveltekit.url%",
				"applicationCategory": "DeveloperApplication",
				"operatingSystem": "Web Browser",
				"offers": {
					"@type": "Offer",
					"price": "0",
					"priceCurrency": "USD"
				},
				"creator": {
					"@type": "Person",
					"name": "Shrey Purohit",
					"url": "https://github.com/ShreyPurohit"
				},
				"keywords": "tailwind css, color matcher, hex to tailwind, color converter, design tools",
				"screenshot": "%sveltekit.assets%/og-image.png",
				"featureList": [
					"Convert hex colors to Tailwind CSS colors",
					"Find multiple color matches",
					"Copy color codes and class names",
					"Visual color comparison",
					"Perceptual color distance calculation"
				]
			}
		</script>

		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div style="display: contents">%sveltekit.body%</div>

		<!-- Schema.org structured data for breadcrumbs -->
		<script type="application/ld+json">
			{
				"@context": "https://schema.org",
				"@type": "BreadcrumbList",
				"itemListElement": [
					{
						"@type": "ListItem",
						"position": 1,
						"name": "Home",
						"item": "%sveltekit.url%"
					},
					{
						"@type": "ListItem",
						"position": 2,
						"name": "Color Matcher",
						"item": "%sveltekit.url%"
					}
				]
			}
		</script>
	</body>
</html>



================================================
File: demo.spec.ts
================================================
import { describe, it, expect } from 'vitest';

describe('sum test', () => {
	it('adds 1 + 2 to equal 3', () => {
		expect(1 + 2).toBe(3);
	});
});




================================================
File: lib/components/ColorInput.svelte
================================================
<script lang="ts">
	import { CircleAlert } from 'lucide-svelte';
	import { extractHexColor } from '$utils/colorValidation';
	import { cn } from '$utils/constants';

	// Props & bindable
	export let value: string = '';
	export let isValidInput: boolean = false;
	export let inputError: string | null = null;

	// Helper to format hex color correctly (# + uppercase)
	function formatHex(color: string) {
		if (!color) return '';
		if (!color.startsWith('#')) color = '#' + color;
		return color.toUpperCase();
	}

	// Handle paste event on text input
	const handlePaste = (e: ClipboardEvent) => {
		e.preventDefault();
		const clipboardData = e.clipboardData;
		if (clipboardData) {
			const pastedText = clipboardData.getData('text');
			const extractedColor = extractHexColor(pastedText);
			value = extractedColor || pastedText;
		}
	};

	// Handle color picker change event
	const handleColorPickerChange = (e: Event) => {
		const target = e.target as HTMLInputElement;
		value = formatHex(target.value);
	};

	// Format the value for consistent use (preview & color picker input)
	$: formattedValue = formatHex(value);
</script>

<div class="space-y-2 px-4 sm:px-0">
	<label for="color-input" class="block text-sm font-medium text-gray-700"> Enter Hex Color </label>

	<div class="relative">
		<input
			id="color-input"
			type="text"
			bind:value
			class={cn(
				'w-full rounded-lg border px-4 py-3 pr-14 font-mono text-lg placeholder-gray-400 transition-colors duration-200 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none',
				isValidInput && value && 'border-green-400 text-green-900',
				inputError && value && 'border-red-300 bg-red-50 text-red-900'
			)}
			onpaste={handlePaste}
			placeholder="#FFFFFF or FFFFFF"
			inputmode="text"
			autocomplete="off"
			autocorrect="off"
			autocapitalize="none"
			spellcheck="false"
			aria-describedby="color-input-help"
		/>

		<!-- Embedded color picker inside input field -->
		<input
			type="color"
			aria-label="Pick a color"
			class="absolute top-1/2 right-2 h-6 w-6 -translate-y-1/2 cursor-pointer rounded-full border border-gray-300 bg-white p-0 shadow-sm transition duration-200 hover:ring-2 hover:ring-blue-500 focus:ring-2 focus:ring-blue-500 focus:outline-none"
			bind:value={formattedValue}
			oninput={handleColorPickerChange}
		/>
	</div>

	{#if inputError && value}
		<p class="mt-1 flex items-center gap-1 text-sm text-red-600">
			<CircleAlert class="h-4 w-4" aria-hidden="true" />
			{inputError}
		</p>
	{/if}

	<p id="color-input-help" class="mt-1 text-xs text-gray-500">
		Enter a hex color code (e.g., <code class="rounded bg-gray-100 px-1 font-mono">#FF5733</code>,
		<code class="rounded bg-gray-100 px-1 font-mono">FF5733</code>) to find the closest Tailwind
		color.
	</p>
</div>



================================================
File: lib/components/ColorMatch.svelte
================================================
<script lang="ts">
	import type { ColorMatchProps } from '$types/color';
	import { cn } from '$utils/constants';
	import { Check, Copy, ExternalLink, Zap } from 'lucide-svelte';

	let { originalColor, match }: ColorMatchProps = $props();
	let copiedField = $state<string | null>(null);

	async function copyToClipboard(text: string, field: string) {
		try {
			await navigator.clipboard.writeText(text);
			copiedField = field;
			setTimeout(() => (copiedField = null), 2000);
		} catch (error) {
			console.error('Failed to copy to clipboard:', error);
		}
	}

	function getSimilarityColor(similarity: number): string {
		if (similarity === 100) return 'text-green-700 bg-green-100 border-green-200';
		if (similarity >= 90) return 'text-green-600 bg-green-100 border-green-200';
		if (similarity >= 75) return 'text-blue-600 bg-blue-100 border-blue-200';
		if (similarity >= 60) return 'text-yellow-600 bg-yellow-100 border-yellow-200';
		return 'text-orange-600 bg-orange-100 border-orange-200';
	}

	function getSimilarityLabel(similarity: number): string {
		if (similarity === 100) return 'Perfect Match';
		if (similarity >= 90) return 'Excellent Match';
		if (similarity >= 75) return 'Good Match';
		if (similarity >= 60) return 'Fair Match';
		return 'Approximate Match';
	}

	const isExactMatch = $derived(match.distance === 0);
</script>

<div class="rounded-xl border border-gray-200 bg-white p-6 shadow-sm">
	<div class="mb-6 flex flex-wrap items-center gap-3">
		<Zap class={cn('h-5 w-5', isExactMatch ? 'text-green-500' : 'text-blue-500')} />
		<h3 class="text-lg font-semibold text-gray-900">
			{isExactMatch ? 'Perfect Color Match Found' : 'Color Match Found'}
		</h3>
		<div
			class={cn(
				'rounded-full border px-3 py-1 text-xs font-medium',
				getSimilarityColor(match.similarity)
			)}
		>
			{getSimilarityLabel(match.similarity)} ({match.similarity.toFixed(1)}%)
		</div>
		{#if isExactMatch}
			<div
				class="flex items-center gap-1 rounded-full border border-green-200 bg-green-50 px-2 py-1 text-xs text-green-600"
			>
				<Check class="h-3 w-3" />
				Exact Match
			</div>
		{/if}
	</div>

	<div class="grid grid-cols-1 gap-6 md:grid-cols-2">
		<!-- Original Color -->
		<div class="space-y-3">
			<h4 class="font-medium text-gray-700">Your Color</h4>
			<div class="relative">
				<div
					class="h-24 w-full rounded-lg border-2 border-gray-200 shadow-inner"
					style="background-color: {originalColor}"
				></div>
				<button
					onclick={() => copyToClipboard(originalColor, 'original')}
					class="bg-opacity-90 hover:bg-opacity-100 absolute top-2 right-2 rounded-lg bg-white p-2 shadow-sm transition-all duration-200 hover:scale-105"
					title="Copy hex code"
				>
					{#if copiedField === 'original'}
						<Check class="h-4 w-4 text-green-600" />
					{:else}
						<Copy class="h-4 w-4 text-gray-600" />
					{/if}
				</button>
			</div>
			<p class="rounded bg-gray-50 px-2 py-1 font-mono text-sm text-gray-600">
				{originalColor}
			</p>
		</div>

		<!-- Matched Color -->
		<div class="space-y-3">
			<h4 class="font-medium text-gray-700">Tailwind Match</h4>
			<div class="relative">
				<div
					class="h-24 w-full rounded-lg border-2 border-gray-200 shadow-inner"
					style="background-color: {match.color.hex}"
				></div>
				<button
					onclick={() => copyToClipboard(match.color.hex, 'match')}
					class="bg-opacity-90 hover:bg-opacity-100 absolute top-2 right-2 rounded-lg bg-white p-2 shadow-sm transition-all duration-200 hover:scale-105"
					title="Copy hex code"
				>
					{#if copiedField === 'match'}
						<Check class="h-4 w-4 text-green-600" />
					{:else}
						<Copy class="h-4 w-4 text-gray-600" />
					{/if}
				</button>
			</div>
			<p class="rounded bg-gray-50 px-2 py-1 font-mono text-sm text-gray-600">
				{match.color.hex}
			</p>
		</div>
	</div>

	<!-- Color Information -->
	<div class="mt-6 space-y-4">
		<div class="flex items-center justify-between rounded-lg bg-gray-50 p-4">
			<div>
				<p class="text-sm text-gray-600">Tailwind Color Name</p>
				<div class="flex items-center gap-2">
					<p class="font-semibold text-gray-900">{match.color.name}</p>
					{#if isExactMatch}
						<span class="rounded-full bg-green-100 px-2 py-0.5 text-xs text-green-700">
							Official
						</span>
					{/if}
				</div>
			</div>
			<button
				onclick={() => copyToClipboard(match.color.name, 'name')}
				class="flex items-center gap-2 rounded-lg border border-gray-200 bg-white px-3 py-2 transition-colors duration-200 hover:bg-gray-50"
			>
				{#if copiedField === 'name'}
					<Check class="h-4 w-4 text-green-600" />
				{:else}
					<Copy class="h-4 w-4 text-gray-500" />
				{/if}
				<span class="text-sm text-gray-600">Copy</span>
			</button>
		</div>

		<div class="flex items-center justify-between rounded-lg bg-gray-50 p-4">
			<div>
				<p class="text-sm text-gray-600">CSS Class Name</p>
				<p class="font-mono text-sm font-semibold text-gray-900">
					{match.color.className}
				</p>
			</div>
			<button
				onclick={() => copyToClipboard(match.color.className, 'className')}
				class="flex items-center gap-2 rounded-lg border border-gray-200 bg-white px-3 py-2 transition-colors duration-200 hover:bg-gray-50"
			>
				{#if copiedField === 'className'}
					<Check class="h-4 w-4 text-green-600" />
				{:else}
					<Copy class="h-4 w-4 text-gray-500" />
				{/if}
				<span class="text-sm text-gray-600">Copy</span>
			</button>
		</div>
	</div>

	<div class="mt-4 rounded-lg border border-blue-100 bg-blue-50 p-3">
		<div class="flex items-center justify-between text-xs text-blue-700">
			<div>
				<strong>Color distance:</strong>
				{match.distance.toFixed(2)} •
				<strong> Similarity:</strong>
				{match.similarity.toFixed(1)}%
				{#if isExactMatch}
					• Perfect match!{/if}
			</div>
			{#if !isExactMatch}
				<a
					href="https://tailwindcss.com/docs/background-color#{match.color.name}"
					target="_blank"
					rel="noopener noreferrer"
					class="flex items-center gap-1 transition-colors hover:text-blue-800"
					title="View in Tailwind docs"
				>
					<ExternalLink class="h-3 w-3" />
					Docs
				</a>
			{/if}
		</div>
	</div>
</div>



================================================
File: lib/components/MultipleMatches.svelte
================================================
<script lang="ts">
	import { Palette } from 'lucide-svelte';
	import type { ColorMatch } from '$types/color';
	import { cn } from '$utils/constants';

	interface Props {
		matches: ColorMatch[];
		onSelectMatch: (match: ColorMatch) => void;
		selectedMatch?: ColorMatch;
	}

	let { matches, onSelectMatch, selectedMatch }: Props = $props();

	// Early return logic converted to reactive condition
	const shouldShow = $derived(matches.length > 1);
</script>

{#if shouldShow}
	<div class="rounded-xl border border-gray-200 bg-white p-6 shadow-sm">
		<div class="mb-4 flex items-center gap-3">
			<Palette class="h-5 w-5 text-purple-500" />
			<h3 class="text-lg font-semibold text-gray-900">Alternative Matches</h3>
			<span class="text-sm text-gray-500">
				({matches.length - 1} more options)
			</span>
		</div>

		<div class="grid grid-cols-2 gap-3 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5">
			{#each matches.slice(1) as match (match.color.name)}
				<button
					onclick={() => onSelectMatch(match)}
					class={cn(
						'group rounded-lg border-2 p-3 transition-all duration-200 hover:shadow-md',
						selectedMatch?.color.name === match.color.name
							? 'border-blue-500 bg-blue-50'
							: 'border-gray-200 bg-white hover:border-gray-300'
					)}
				>
					<div
						class="mb-2 h-12 w-full rounded-md border border-gray-200"
						style="background-color: {match.color.hex};"
					></div>
					<p class="truncate text-xs font-medium text-gray-900">
						{match.color.name}
					</p>
					<p class="text-xs text-gray-500">
						{match.similarity.toFixed(0)}% match
					</p>
				</button>
			{/each}
		</div>
	</div>
{/if}



================================================
File: lib/components/main/EmptyState.svelte
================================================
<script>
	import {
		Accessibility,
		CircleCheck,
		Code,
		Monitor,
		PaletteIcon,
		Share2,
		Sparkles,
		User
	} from 'lucide-svelte';
</script>

<section class="py-12 text-center" aria-labelledby="empty-state">
	<div
		class="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-gradient-to-br from-gray-100 to-gray-200"
	>
		<Sparkles class="h-8 w-8 text-gray-400" aria-hidden="true" />
	</div>
	<h2 id="empty-state" class="mb-2 text-xl font-semibold text-gray-600">
		Ready to Match Colors 🎨
	</h2>
	<p class="mx-auto mb-6 max-w-md text-gray-500">
		Enter a hex color code above to find its closest Tailwind CSS equivalent. Great for maintaining
		design consistency!
	</p>

	<!-- SEO-friendly content section -->
	<div class="mx-auto mt-8 max-w-3xl text-center">
		<div class="grid gap-8 md:grid-cols-2">
			<div class="p-2 border rounded-3xl">
				<h3 class="mb-3 flex items-center gap-2 text-lg font-semibold text-gray-900">
					<CircleCheck class="h-5 w-5 text-green-500" /> How It Works
				</h3>
				<ul class="list-none space-y-3 text-sm text-gray-600">
					<li class="flex items-center gap-2">
						<span class="text-blue-500">#️⃣</span>
						<span
							>Enter any hex color code (e.g., <code class="rounded bg-gray-100 px-1 font-mono"
								>#FF5733</code
							>)</span
						>
					</li>
					<li class="flex items-center gap-2">
						<PaletteIcon class="h-4 w-4 text-purple-500" />
						<span>Get the closest Tailwind CSS color match</span>
					</li>
					<li class="flex items-center gap-2">
						<Share2 class="h-4 w-4 text-green-500" />
						<span>Copy the class name or hex value with one click</span>
					</li>
					<li class="flex items-center gap-2">
						<Sparkles class="h-4 w-4 text-yellow-400" />
						<span>Explore alternative color options</span>
					</li>
				</ul>
			</div>
			<div class="p-2 border rounded-3xl">
				<h3 class="mb-3 flex items-center gap-2 text-lg font-semibold text-gray-900">
					<User class="h-5 w-5 text-indigo-500" /> Perfect For
				</h3>
				<ul class="list-none space-y-3 text-sm text-gray-600">
					<li class="flex items-center gap-2">
						<Monitor class="h-4 w-4 text-blue-500" />
						<span>Web developers using Tailwind CSS</span>
					</li>
					<li class="flex items-center gap-2">
						<User class="h-4 w-4 text-indigo-500" />
						<span>UI/UX designers maintaining consistency</span>
					</li>
					<li class="flex items-center gap-2">
						<Code class="h-4 w-4 text-purple-600" />
						<span>Converting design mockups to code</span>
					</li>
					<li class="flex items-center gap-2">
						<Accessibility class="h-4 w-4 text-green-600" />
						<span>Finding accessible color alternatives</span>
					</li>
				</ul>
			</div>
		</div>
	</div>
</section>



================================================
File: lib/components/main/Footer.svelte
================================================
<script>
	import {
		BookHeart,
		BookOpen,
		Bubbles,
		ExternalLink,
		GitGraph,
		Heart,
		Palette,
		Share2,
		Sparkles,
		ToolCase
	} from 'lucide-svelte';
</script>

<footer
	class="mt-8 rounded-2xl border-t border-gray-200/50 bg-white/60 pt-12 pb-12 shadow-lg backdrop-blur-md"
>
	<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
		<div class="grid gap-12 md:grid-cols-3">
			<!-- About Section -->
			<div>
				<h3
					class="mb-4 flex items-center justify-center gap-2 text-lg font-semibold text-gray-900 md:justify-start"
				>
					<ToolCase class="h-6 w-6 text-blue-600" /> About This Tool
				</h3>
				<p class="text-center text-sm leading-relaxed text-gray-600 md:text-left">
					Tailwind Color Matcher uses perceptual color distance in LCH space to suggest the most
					visually accurate Tailwind color classes. 🎨
				</p>
			</div>

			<!-- Features Section -->
			<div>
				<h3
					class="mb-4 flex items-center justify-center gap-2 text-lg font-semibold text-gray-900 md:justify-start"
				>
					<Bubbles class="h-6 w-6 text-purple-600" /> Features
				</h3>
				<ul class="flex flex-col gap-2 items-center text-sm text-gray-600 md:items-start">
					<li class="flex items-center gap-2">
						<Sparkles class="h-4 w-4 flex-shrink-0 text-blue-500" />
						<span>Accurate Delta E matching</span>
					</li>
					<li class="flex items-center gap-2">
						<Palette class="h-4 w-4 flex-shrink-0 text-purple-500" />
						<span>Multiple color suggestions</span>
					</li>
					<li class="flex items-center gap-2">
						<Share2 class="h-4 w-4 flex-shrink-0 text-green-500" />
						<span>One-click class copying</span>
					</li>
					<li class="flex items-center gap-2">
						<BookOpen class="h-4 w-4 flex-shrink-0 text-orange-500" />
						<span>Side-by-side color previews</span>
					</li>
					<li class="flex items-center gap-2">
						<GitGraph class="h-4 w-4 flex-shrink-0 text-indigo-500" />
						<span>Shareable color URLs</span>
					</li>
				</ul>
			</div>

			<!-- Resources Section -->
			<div>
				<h3
					class="mb-4 flex items-center justify-center gap-2 text-lg font-semibold text-gray-900 md:justify-start"
				>
					<BookHeart class="h-6 w-6 text-red-600" /> Resources
				</h3>
				<ul class="flex flex-col gap-2 items-center text-sm text-gray-600 md:items-start">
					<li>
						<a
							href="https://tailwindcss.com/docs/background-color"
							target="_blank"
							rel="noopener noreferrer"
							class="group inline-flex items-center gap-1 transition-colors hover:text-gray-900"
						>
							Tailwind Color Docs <ExternalLink
								class="h-4 w-4 text-gray-500 group-hover:text-gray-900"
							/>
						</a>
					</li>
					<li>
						<a
							href="https://github.com/ShreyPurohit/Tailwind-Color-Matcher"
							target="_blank"
							rel="noopener noreferrer"
							class="group inline-flex items-center gap-1 transition-colors hover:text-gray-900"
						>
							GitHub Repository <ExternalLink
								class="h-4 w-4 text-gray-500 group-hover:text-gray-900"
							/>
						</a>
					</li>
					<li>
						<a
							href="https://tailwindcss.com"
							target="_blank"
							rel="noopener noreferrer"
							class="group inline-flex items-center gap-1 transition-colors hover:text-gray-900"
						>
							Tailwind CSS Website <ExternalLink
								class="h-4 w-4 text-gray-500 group-hover:text-gray-900"
							/>
						</a>
					</li>
				</ul>
			</div>
		</div>

		<!-- Divider -->
		<div class="mt-12 border-t border-gray-100 pt-6 text-center">
			<p class="text-sm text-gray-500">
				Built with
				<a href="https://kit.svelte.dev" class="underline hover:text-gray-700">SvelteKit</a>,
				<a href="https://www.typescriptlang.org" class="underline hover:text-gray-700">TypeScript</a
				>, and
				<a href="https://tailwindcss.com" class="underline hover:text-gray-700">Tailwind CSS</a>
				• Using perceptual LCH color space for precision matching.
			</p>
			<p class="mt-2 flex items-center justify-center gap-1 text-sm text-gray-500">
				© 2025
				<a
					href="https://github.com/ShreyPurohit"
					class="inline-flex items-center gap-1 underline hover:text-gray-700"
				>
					Shrey Purohit <Heart class="h-4 w-4 text-red-500" />
				</a>
				. MIT License.
			</p>
		</div>
	</div>
</footer>



================================================
File: lib/components/main/Header.svelte
================================================



================================================
File: lib/types/color.ts
================================================
export interface TailwindColor {
	name: string;
	hex: string;
	className: string;
}

export interface ColorMatch {
	color: TailwindColor;
	distance: number;
	similarity: number;
}

export interface MultipleMatchesProps {
	matches: ColorMatch[];
	onSelectMatch: (match: ColorMatch) => void;
	selectedMatch?: ColorMatch;
}

export interface ColorInputProps {
	value: string;
	isValidInput: boolean;
	inputError?: string;
}

export interface ColorMatchProps {
	originalColor: string;
	match: ColorMatch;
}



================================================
File: lib/utils/colorConversion.ts
================================================
import chroma from 'chroma-js';

/**
 * Gets LCH values from hex color for distance calculations
 */
export function getLCHFromHex(hex: string): [number, number, number] {
	try {
		const lch = chroma(hex).lch();
		// Handle NaN values that can occur with some edge case colors
		return [isNaN(lch[0]) ? 0 : lch[0], isNaN(lch[1]) ? 0 : lch[1], isNaN(lch[2]) ? 0 : lch[2]];
	} catch (error) {
		console.warn('Failed to get LCH from hex:', hex, error);
		return [0, 0, 0];
	}
}

/**
 * Gets LAB values from hex color for better color distance calculations
 */
export function getLABFromHex(hex: string): [number, number, number] {
	try {
		const lab = chroma(hex).lab();
		return [isNaN(lab[0]) ? 0 : lab[0], isNaN(lab[1]) ? 0 : lab[1], isNaN(lab[2]) ? 0 : lab[2]];
	} catch (error) {
		console.warn('Failed to get LAB from hex:', hex, error);
		return [0, 0, 0];
	}
}

/**
 * Calculates perceptual color distance using improved Delta E algorithm
 * Uses CIEDE2000 formula for more accurate perceptual distance
 */
export function calculateColorDistance(color1: string, color2: string): number {
	try {
		// Use chroma.js built-in Delta E calculation which is more accurate
		const deltaE = chroma.deltaE(color1, color2);
		return deltaE;
	} catch (error) {
		console.warn('Failed to calculate color distance with Delta E, falling back to LCH:', error);

		// Fallback to LCH distance calculation
		try {
			const [L1, C1, H1] = getLCHFromHex(color1);
			const [L2, C2, H2] = getLCHFromHex(color2);

			// Use weighted distance calculation for better perceptual accuracy
			const deltaL = L1 - L2;
			const deltaC = C1 - C2;
			const deltaH = H1 - H2;

			// Weight lightness more heavily as it's more perceptually important
			const distance = Math.sqrt(
				Math.pow(deltaL * 2, 2) + Math.pow(deltaC, 2) + Math.pow(deltaH, 2)
			);

			return distance;
		} catch (fallbackError) {
			console.warn('Failed to calculate color distance:', fallbackError);
			return Infinity;
		}
	}
}

/**
 * Get color information including various color space values
 */
export function getColorInfo(hex: string) {
	try {
		const color = chroma(hex);
		return {
			hex: color.hex(),
			rgb: color.rgb(),
			hsl: color.hsl(),
			lab: color.lab(),
			lch: color.lch(),
			luminance: color.luminance(),
			name: color.name ? color.name() : undefined
		};
	} catch (error) {
		console.warn('Failed to get color info:', error);
		return null;
	}
}

/**
 * Check if a color is considered light or dark
 */
export function isLightColor(hex: string): boolean {
	try {
		return chroma(hex).luminance() > 0.5;
	} catch (error) {
		console.warn('Failed to determine color brightness:', error);
		return false;
	}
}

/**
 * Get contrasting text color (black or white) for a given background color
 */
export function getContrastingTextColor(backgroundColor: string): string {
	return isLightColor(backgroundColor) ? '#000000' : '#ffffff';
}



================================================
File: lib/utils/colorMatching.ts
================================================
import type { ColorMatch } from '../types/color';
import { calculateColorDistance } from './colorConversion';
import { findExactTailwindMatch, getTailwindColors } from './tailwindColors';

/**
 * Finds the closest matching Tailwind color to a given hex color
 * Now prioritizes exact matches first
 */
export function findClosestColor(userColor: string, threshold: number = 50): ColorMatch | null {
	const normalizedUserColor = userColor.toUpperCase();

	// First, check for exact matches
	const exactMatch = findExactTailwindMatch(normalizedUserColor);
	if (exactMatch) {
		return {
			color: exactMatch,
			distance: 0,
			similarity: 100
		};
	}

	// If no exact match, find the closest color
	const flatColors = getTailwindColors();

	if (!flatColors.length) {
		return null;
	}

	let closestMatch: ColorMatch | null = null;
	let minDistance = Infinity;

	flatColors.forEach((tailwindColor) => {
		// Skip colors that can't be compared (transparent, current, inherit)
		if (!tailwindColor.hex.startsWith('#')) {
			return;
		}

		const distance = calculateColorDistance(normalizedUserColor, tailwindColor.hex);

		if (distance < minDistance) {
			minDistance = distance;
			// Improved similarity calculation
			const similarity = Math.max(0, Math.min(100, 100 - (distance / 100) * 100));
			closestMatch = {
				color: tailwindColor,
				distance,
				similarity
			};
		}
	});

	// Only return match if within threshold
	if (closestMatch !== null && (closestMatch as ColorMatch).distance <= threshold) {
		return closestMatch;
	}

	return null;
}

/**
 * Finds multiple close matches for better user choice
 * Now properly handles exact matches at the top
 */
export function findMultipleMatches(
	userColor: string,
	count: number = 5,
	threshold: number = 50
): ColorMatch[] {
	const normalizedUserColor = userColor.toUpperCase();

	// Check for exact match first
	const exactMatch = findExactTailwindMatch(normalizedUserColor);
	const matches: ColorMatch[] = [];

	if (exactMatch) {
		matches.push({
			color: exactMatch,
			distance: 0,
			similarity: 100
		});
	}

	const flatColors = getTailwindColors();

	flatColors.forEach((tailwindColor) => {
		// Skip the exact match we already added and non-hex colors
		if (
			(exactMatch && tailwindColor.name === exactMatch.name) ||
			!tailwindColor.hex.startsWith('#')
		) {
			return;
		}

		const distance = calculateColorDistance(normalizedUserColor, tailwindColor.hex);

		if (distance <= threshold) {
			// Improved similarity calculation
			const similarity = Math.max(0, Math.min(100, 100 - (distance / 100) * 100));

			matches.push({
				color: tailwindColor,
				distance,
				similarity
			});
		}
	});

	return matches
		.sort((a, b) => {
			// Exact matches first (distance 0)
			if (a.distance === 0 && b.distance !== 0) return -1;
			if (a.distance !== 0 && b.distance === 0) return 1;

			// Then by distance
			return a.distance - b.distance;
		})
		.slice(0, count);
}

/**
 * Get color suggestions based on color family
 */
export function getColorFamilySuggestions(userColor: string): ColorMatch[] {
	const flatColors = getTailwindColors();
	const matches: ColorMatch[] = [];

	flatColors.forEach((tailwindColor) => {
		if (!tailwindColor.hex.startsWith('#')) return;

		const distance = calculateColorDistance(userColor, tailwindColor.hex);
		const similarity = Math.max(0, Math.min(100, 100 - (distance / 100) * 100));

		matches.push({
			color: tailwindColor,
			distance,
			similarity
		});
	});

	return matches.sort((a, b) => a.distance - b.distance).slice(0, 10);
}



================================================
File: lib/utils/colorValidation.ts
================================================
/**
 * Validates if a string is a valid hex color code
 */
export function isValidHex(hex: string): boolean {
	return /^#[0-9A-Fa-f]{6}$/i.test(hex);
}

/**
 * Normalizes hex color input by adding # if missing and converting to uppercase
 */
export function normalizeHexInput(input: string): string {
	const cleaned = input.trim();
	if (cleaned.length === 6 && /^[0-9A-Fa-f]{6}$/.test(cleaned)) {
		return `#${cleaned.toUpperCase()}`;
	}
	if (cleaned.length === 7 && cleaned.startsWith('#')) {
		return cleaned.toUpperCase();
	}
	return cleaned;
}

/**
 * Extracts hex value from various input formats
 */
export function extractHexColor(input: string): string | null {
	const normalized = normalizeHexInput(input);
	return isValidHex(normalized) ? normalized : null;
}



================================================
File: lib/utils/constants.ts
================================================
// place files you want to import through the `$lib` alias in this folder.
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs));
}

export const exampleColors = [
	'#FF6B6B',
	'#4ECDC4',
	'#45B7D1',
	'#96CEB4',
	'#FECA57',
	'#FF9FF3',
	'#54A0FF'
];

// Define the complete Tailwind color palette manually to ensure consistency
export const TAILWIND_COLORS: Record<string, Record<string | number, string>> = {
	slate: {
		50: '#f8fafc',
		100: '#f1f5f9',
		200: '#e2e8f0',
		300: '#cbd5e1',
		400: '#94a3b8',
		500: '#64748b',
		600: '#475569',
		700: '#334155',
		800: '#1e293b',
		900: '#0f172a',
		950: '#020617'
	},
	gray: {
		50: '#f9fafb',
		100: '#f3f4f6',
		200: '#e5e7eb',
		300: '#d1d5db',
		400: '#9ca3af',
		500: '#6b7280',
		600: '#4b5563',
		700: '#374151',
		800: '#1f2937',
		900: '#111827',
		950: '#030712'
	},
	zinc: {
		50: '#fafafa',
		100: '#f4f4f5',
		200: '#e4e4e7',
		300: '#d4d4d8',
		400: '#a1a1aa',
		500: '#71717a',
		600: '#52525b',
		700: '#3f3f46',
		800: '#27272a',
		900: '#18181b',
		950: '#09090b'
	},
	red: {
		50: '#fef2f2',
		100: '#fee2e2',
		200: '#fecaca',
		300: '#fca5a5',
		400: '#f87171',
		500: '#ef4444',
		600: '#dc2626',
		700: '#b91c1c',
		800: '#991b1b',
		900: '#7f1d1d',
		950: '#450a0a'
	},
	orange: {
		50: '#fff7ed',
		100: '#ffedd5',
		200: '#fed7aa',
		300: '#fdba74',
		400: '#fb923c',
		500: '#f97316',
		600: '#ea580c',
		700: '#c2410c',
		800: '#9a3412',
		900: '#7c2d12',
		950: '#431407'
	},
	amber: {
		50: '#fffbeb',
		100: '#fef3c7',
		200: '#fde68a',
		300: '#fcd34d',
		400: '#fbbf24',
		500: '#f59e0b',
		600: '#d97706',
		700: '#b45309',
		800: '#92400e',
		900: '#78350f',
		950: '#451a03'
	},
	yellow: {
		50: '#fefce8',
		100: '#fef9c3',
		200: '#fef08a',
		300: '#fde047',
		400: '#facc15',
		500: '#eab308',
		600: '#ca8a04',
		700: '#a16207',
		800: '#854d0e',
		900: '#713f12',
		950: '#422006'
	},
	lime: {
		50: '#f7fee7',
		100: '#ecfccb',
		200: '#d9f99d',
		300: '#bef264',
		400: '#a3e635',
		500: '#84cc16',
		600: '#65a30d',
		700: '#4d7c0f',
		800: '#3f6212',
		900: '#365314',
		950: '#1a2e05'
	},
	green: {
		50: '#f0fdf4',
		100: '#dcfce7',
		200: '#bbf7d0',
		300: '#86efac',
		400: '#4ade80',
		500: '#22c55e',
		600: '#16a34a',
		700: '#15803d',
		800: '#166534',
		900: '#14532d',
		950: '#052e16'
	},
	emerald: {
		50: '#ecfdf5',
		100: '#d1fae5',
		200: '#a7f3d0',
		300: '#6ee7b7',
		400: '#34d399',
		500: '#10b981',
		600: '#059669',
		700: '#047857',
		800: '#065f46',
		900: '#064e3b',
		950: '#022c22'
	},
	teal: {
		50: '#f0fdfa',
		100: '#ccfbf1',
		200: '#99f6e4',
		300: '#5eead4',
		400: '#2dd4bf',
		500: '#14b8a6',
		600: '#0d9488',
		700: '#0f766e',
		800: '#115e59',
		900: '#134e4a',
		950: '#042f2e'
	},
	cyan: {
		50: '#ecfeff',
		100: '#cffafe',
		200: '#a5f3fc',
		300: '#67e8f9',
		400: '#22d3ee',
		500: '#06b6d4',
		600: '#0891b2',
		700: '#0e7490',
		800: '#155e75',
		900: '#164e63',
		950: '#083344'
	},
	sky: {
		50: '#f0f9ff',
		100: '#e0f2fe',
		200: '#bae6fd',
		300: '#7dd3fc',
		400: '#38bdf8',
		500: '#0ea5e9',
		600: '#0284c7',
		700: '#0369a1',
		800: '#075985',
		900: '#0c4a6e',
		950: '#082f49'
	},
	blue: {
		50: '#eff6ff',
		100: '#dbeafe',
		200: '#bfdbfe',
		300: '#93c5fd',
		400: '#60a5fa',
		500: '#3b82f6',
		600: '#2563eb',
		700: '#1d4ed8',
		800: '#1e40af',
		900: '#1e3a8a',
		950: '#172554'
	},
	indigo: {
		50: '#eef2ff',
		100: '#e0e7ff',
		200: '#c7d2fe',
		300: '#a5b4fc',
		400: '#818cf8',
		500: '#6366f1',
		600: '#4f46e5',
		700: '#4338ca',
		800: '#3730a3',
		900: '#312e81',
		950: '#1e1b4b'
	},
	violet: {
		50: '#f5f3ff',
		100: '#ede9fe',
		200: '#ddd6fe',
		300: '#c4b5fd',
		400: '#a78bfa',
		500: '#8b5cf6',
		600: '#7c3aed',
		700: '#6d28d9',
		800: '#5b21b6',
		900: '#4c1d95',
		950: '#2e1065'
	},
	purple: {
		50: '#faf5ff',
		100: '#f3e8ff',
		200: '#e9d5ff',
		300: '#d8b4fe',
		400: '#c084fc',
		500: '#a855f7',
		600: '#9333ea',
		700: '#7e22ce',
		800: '#6b21a8',
		900: '#581c87',
		950: '#3b0764'
	},
	fuchsia: {
		50: '#fdf4ff',
		100: '#fae8ff',
		200: '#f5d0fe',
		300: '#f0abfc',
		400: '#e879f9',
		500: '#d946ef',
		600: '#c026d3',
		700: '#a21caf',
		800: '#86198f',
		900: '#701a75',
		950: '#4a044e'
	},
	pink: {
		50: '#fdf2f8',
		100: '#fce7f3',
		200: '#fbcfe8',
		300: '#f9a8d4',
		400: '#f472b6',
		500: '#ec4899',
		600: '#db2777',
		700: '#be185d',
		800: '#9d174d',
		900: '#831843',
		950: '#500724'
	},
	rose: {
		50: '#fff1f2',
		100: '#ffe4e6',
		200: '#fecdd3',
		300: '#fda4af',
		400: '#fb7185',
		500: '#f43f5e',
		600: '#e11d48',
		700: '#be123c',
		800: '#9f1239',
		900: '#881337',
		950: '#4c0519'
	}
};



================================================
File: lib/utils/tailwindColors.ts
================================================
import type { TailwindColor } from '../types/color.js';
import { TAILWIND_COLORS } from './constants.js';

const BASIC_COLORS: Record<string, string> = {
	black: '#000000',
	white: '#ffffff'
};

/**
 * Flattens the Tailwind color palette into a searchable array
 */
export function flattenTailwindColors(): TailwindColor[] {
	const flatColors: TailwindColor[] = [];

	// Add basic colors first
	Object.entries(BASIC_COLORS).forEach(([colorKey, value]) => {
		flatColors.push({
			name: colorKey,
			hex: value.toUpperCase(),
			className: `bg-${colorKey}`
		});
	});

	// Add colors from the manual palette
	Object.entries(TAILWIND_COLORS).forEach(([colorKey, shades]) => {
		Object.entries(shades).forEach(([shadeKey, colorValue]) => {
			if (typeof colorValue === 'string' && colorValue.startsWith('#')) {
				flatColors.push({
					name: `${colorKey}-${shadeKey}`,
					hex: colorValue.toUpperCase(),
					className: `bg-${colorKey}-${shadeKey}`
				});
			}
		});
	});

	return flatColors;
}

/**
 * Gets all available Tailwind colors (cached for performance)
 */
let cachedColors: TailwindColor[] | null = null;
export function getTailwindColors(): TailwindColor[] {
	if (!cachedColors) {
		cachedColors = flattenTailwindColors();
		console.log(`Loaded ${cachedColors.length} Tailwind colors`);
	}
	return cachedColors;
}

/**
 * Check if a hex color is an exact match in Tailwind palette
 */
export function findExactTailwindMatch(hex: string): TailwindColor | null {
	const colors = getTailwindColors();
	const normalizedHex = hex.toUpperCase();

	return colors.find((color) => color.hex === normalizedHex) || null;
}



================================================
File: routes/+layout.svelte
================================================
<script lang="ts">
	import { onMount } from 'svelte';
	import '../app.css';

	let { data, children } = $props();

	// SEO and performance optimizations
	onMount(() => {
		// Add performance monitoring
		if (typeof window !== 'undefined' && 'performance' in window) {
			// Track Core Web Vitals
			import('web-vitals')
				.then(({ onCLS, onTTFB, onFCP, onLCP, onINP }) => {
					onCLS(console.log);
					onINP(console.log);
					onFCP(console.log);
					onLCP(console.log);
					onTTFB(console.log);
				})
				.catch(() => {
					// Silently fail if web-vitals is not available
				});
		}
	});
</script>

<svelte:head>
	<!-- Dynamic meta tags based on current page -->
	<title>
		{data?.title || 'Tailwind Color Matcher - Convert Hex Colors to Tailwind CSS'}
	</title>
	<meta
		name="description"
		content={data?.description ||
			"Find the closest Tailwind CSS color to any hex color code. Perfect for maintaining design consistency with Tailwind's color palette. Free online tool for developers and designers."}
	/>

	<!-- Preload critical resources -->
	<link rel="preload" href="/fonts/inter-var.woff2" as="font" type="font/woff2" />

	<!-- DNS prefetch for external resources -->
	<link rel="dns-prefetch" href="//fonts.googleapis.com" />
	<link rel="dns-prefetch" href="//fonts.gstatic.com" />
</svelte:head>

{@render children?.()}



================================================
File: routes/+layout.ts
================================================
import type { LayoutLoad } from './$types';

export const load: LayoutLoad = async ({ url }) => {
	return {
		title: 'Tailwind Color Matcher - Convert Hex Colors to Tailwind CSS',
		description:
			"Find the closest Tailwind CSS color to any hex color code. Perfect for maintaining design consistency with Tailwind's color palette. Free online tool for developers and designers.",
		url: url.href,
		canonical: url.href
	};
};

// Enable prerendering for better SEO
export const prerender = true;

// Enable server-side rendering
export const ssr = true;

// Enable trailing slash for consistent URLs
export const trailingSlash = 'always';



================================================
File: routes/+page.svelte
================================================
<script lang="ts">
	import { browser } from '$app/environment';
	import { goto } from '$app/navigation';

	import ColorInput from '$components/ColorInput.svelte';
	import ColorMatch from '$components/ColorMatch.svelte';
	import EmptyState from '$components/main/EmptyState.svelte';
	import Footer from '$components/main/Footer.svelte';
	import MultipleMatches from '$components/MultipleMatches.svelte';

	import { BookOpen, GitGraph, Palette, Share2, TriangleAlert } from 'lucide-svelte';

	import type { ColorMatch as ColorMatchType } from '$types/color';
	import type { PageData } from './$types';

	import { findMultipleMatches } from '$utils/colorMatching';
	import { extractHexColor } from '$utils/colorValidation';
	import { exampleColors } from '$utils/constants';

	let { data }: { data: PageData } = $props();

	// Step 1: Declare reactive state variables
	let inputValue = $state(data.initialColor || '');
	let selectedMatch = $state<ColorMatchType | null>(null);
	let multipleMatches = $state<ColorMatchType[]>([]);
	let lastValidatedColor = $state<string | null>(null); // Track the last color we processed
	let shareUrl = $state('');

	// Step 2: Derived reactive values

	// validatedColor updates automatically whenever inputValue changes
	const validatedColor = $derived(inputValue.trim() ? extractHexColor(inputValue) : null);

	// isValidInput flag
	const isValidInput = $derived(validatedColor !== null);

	// inputError message
	const inputError = $derived(
		inputValue.trim() && !isValidInput
			? 'Please enter a valid hex color (e.g., #FF5733 or FF5733)'
			: undefined
	);

	// Dynamic background style based on validated color
	const backgroundStyle = $derived(() => {
		if (validatedColor) {
			return `background: linear-gradient(135deg, ${validatedColor}15, ${validatedColor}25, ${validatedColor}10), linear-gradient(to bottom right, #ffffff, #f8fafc);`;
		}
		return '';
	});

	// Reactive effect: when validatedColor changes, update matches
	$effect(() => {
		if (validatedColor) {
			// Only update matches if we have a new color
			if (validatedColor !== lastValidatedColor) {
				const matches = findMultipleMatches(validatedColor, 8);
				multipleMatches = matches;
				selectedMatch = matches[0] || null;
				lastValidatedColor = validatedColor;
			}
		} else {
			// Clear everything when no valid color
			if (multipleMatches.length > 0 || selectedMatch !== null) {
				multipleMatches = [];
				selectedMatch = null;
				lastValidatedColor = null;
			}
		}
	});

	// Update URL when color changes for better SEO and sharing
	$effect(() => {
		if (browser && validatedColor && validatedColor !== data.initialColor) {
			const url = new URL(data.url);
			url.searchParams.set('color', validatedColor);
			goto(url.toString(), { replaceState: true, noScroll: true });
		}
	});

	// Select a color match when user clicks one
	function handleSelectMatch(match: ColorMatchType) {
		selectedMatch = match;
	}

	// Set input value from an example color
	function handleExampleColor(color: string) {
		inputValue = color;
		// Update URL immediately for better UX
		if (browser) {
			const url = new URL(data.url);
			url.searchParams.set('color', color);
			goto(url.toString(), { replaceState: true, noScroll: true });
		}
	}

	// Share functionality
	async function shareColor() {
		if (!validatedColor) return;

		const url = new URL(data.url);
		url.searchParams.set('color', validatedColor);
		shareUrl = url.toString();

		if (navigator.share) {
			await navigator.share({
				title: `Tailwind Color Match for ${validatedColor}`,
				text: `Check out this Tailwind CSS color match for ${validatedColor}`,
				url: shareUrl
			});
		} else {
			await navigator.clipboard.writeText(shareUrl);
		}
	}
</script>

<svelte:head>
	{#if validatedColor && selectedMatch}
		<title>
			{validatedColor} → {selectedMatch.color.name} | Tailwind Color Matcher
		</title>
		<meta
			name="description"
			content="Convert {validatedColor} to Tailwind CSS color {selectedMatch.color
				.name} ({selectedMatch.color.hex}). {selectedMatch.similarity.toFixed(
				1
			)}% similarity match with class name {selectedMatch.color.className}."
		/>

		<!-- Open Graph for color-specific pages -->
		<meta
			property="og:title"
			content="{validatedColor} → {selectedMatch.color.name} | Tailwind Color Matcher"
		/>
		<meta
			property="og:description"
			content="Convert {validatedColor} to Tailwind CSS color {selectedMatch.color
				.name}. {selectedMatch.similarity.toFixed(1)}% similarity match."
		/>
		<meta
			property="og:image"
			content="{data.url}/api/og?color={encodeURIComponent(
				validatedColor
			)}&match={encodeURIComponent(selectedMatch.color.name)}"
		/>
	{/if}
</svelte:head>

<div
	class="min-h-screen transition-all duration-500 ease-in-out"
	class:bg-gradient-to-br={!validatedColor}
	class:from-blue-50={!validatedColor}
	class:via-white={!validatedColor}
	class:to-purple-50={!validatedColor}
	style={backgroundStyle()}
>
	<!-- Skip to main content for accessibility -->
	<a
		href="#main-content"
		class="sr-only z-50 rounded-md bg-blue-600 px-4 py-2 text-white focus:not-sr-only focus:absolute focus:top-4 focus:left-4"
	>
		Skip to main content
	</a>

	<div class="container mx-auto max-w-4xl px-4 py-8">
		<!-- Header with enhanced SEO -->
		<header class="mb-8 px-4 text-center sm:px-0">
			<div class="mb-4 flex flex-col items-center justify-center gap-3 sm:flex-row">
				<div class="flex-shrink-0 rounded-xl bg-gradient-to-br from-blue-500 to-purple-600 p-3">
					<Palette class="h-6 w-6 text-white sm:h-8 sm:w-8" aria-hidden="true" />
				</div>
				<h1 class="text-2xl font-bold text-gray-900 sm:text-3xl">Tailwind Color Matcher</h1>
			</div>
			<p class="mx-auto mb-6 max-w-2xl text-base text-gray-600 sm:text-lg">
				Find the closest <strong>Tailwind CSS color</strong> to any hex color code. Perfect for maintaining
				design consistency with Tailwind's comprehensive color palette.
			</p>

			<!-- Action buttons for better engagement -->
			<div class="flex flex-col items-center justify-center gap-3 text-sm sm:flex-row sm:gap-6">
				<a
					href="https://github.com/ShreyPurohit/Tailwind-Color-Matcher"
					target="_blank"
					rel="noopener noreferrer"
					class="flex items-center gap-2 rounded px-3 py-1.5 text-gray-600 transition-colors hover:text-gray-900 focus:ring-2 focus:ring-blue-500 focus:outline-none"
				>
					<GitGraph class="h-4 w-4" aria-hidden="true" />
					View on GitHub
				</a>
				<a
					href="https://tailwindcss.com/docs/background-color"
					target="_blank"
					rel="noopener noreferrer"
					class="flex items-center gap-2 rounded px-3 py-1.5 text-gray-600 transition-colors hover:text-gray-900 focus:ring-2 focus:ring-blue-500 focus:outline-none"
				>
					<BookOpen class="h-4 w-4" aria-hidden="true" />
					Tailwind Docs
				</a>
				{#if validatedColor}
					<button
						onclick={shareColor}
						class="flex items-center gap-2 rounded px-3 py-1.5 text-gray-600 transition-colors hover:text-gray-900 focus:ring-2 focus:ring-blue-500 focus:outline-none"
					>
						<Share2 class="h-4 w-4" aria-hidden="true" />
						Share Color
					</button>
				{/if}
			</div>
		</header>

		<!-- Main content with semantic HTML -->
		<main id="main-content">
			<!-- Input Section -->
			<section
				class="mb-6 rounded-xl border border-gray-200 bg-white/90 p-6 shadow-sm backdrop-blur-sm"
				aria-labelledby="input-section"
			>
				<h2 id="input-section" class="sr-only">Color Input Section</h2>
				<ColorInput bind:value={inputValue} {isValidInput} {inputError} />

				<!-- Example Colors -->
				<div class="mt-6">
					<h3 class="mb-3 text-sm font-medium text-gray-700">Popular Color Examples:</h3>
					<div class="flex flex-wrap gap-2" role="group" aria-label="Example colors">
						{#each exampleColors as color (color)}
							<button
								onclick={() => handleExampleColor(color)}
								class="group flex items-center gap-2 rounded-lg border border-gray-200 bg-gray-50/90 px-3 py-2 backdrop-blur-sm transition-colors duration-200 hover:bg-gray-100/90"
								title={`Try ${color} - Click to test this color`}
								aria-label={`Try example color ${color}`}
							>
								<div
									class="h-4 w-4 rounded border border-gray-300"
									style="background-color: {color};"
									aria-hidden="true"
								></div>
								<span class="font-mono text-sm text-gray-600 group-hover:text-gray-900">
									{color}
								</span>
							</button>
						{/each}
					</div>
				</div>
			</section>

			<!-- Results Section -->
			{#if validatedColor}
				<section class="space-y-6" aria-labelledby="results-section">
					<h2 id="results-section" class="sr-only">Color Match Results</h2>
					{#if selectedMatch}
						<ColorMatch originalColor={validatedColor} match={selectedMatch} />
						<MultipleMatches
							matches={multipleMatches}
							onSelectMatch={(match) => handleSelectMatch(match)}
							{selectedMatch}
						/>
					{:else}
						<!-- No Match Found -->
						<div
							class="rounded-xl border border-orange-200 bg-orange-50/90 p-6 backdrop-blur-sm"
							role="alert"
						>
							<div class="mb-3 flex items-center gap-3">
								<TriangleAlert class="h-6 w-6 text-orange-500" aria-hidden="true" />
								<h3 class="text-lg font-semibold text-orange-900">No Close Match Found</h3>
							</div>
							<p class="mb-4 text-orange-800">
								The color
								<code class="rounded bg-orange-100 px-2 py-1 font-mono text-sm">
									{validatedColor}
								</code>
								doesn't have a close match in the Tailwind color palette. Consider using a custom color
								or choosing a different shade.
							</p>
							<div class="rounded-lg bg-orange-100/90 p-4 backdrop-blur-sm">
								<p class="text-sm text-orange-700">
									<strong>Tip:</strong> Tailwind CSS supports arbitrary values! You can use <br />
									<code class="font-mono">bg-[{validatedColor}]</code> for exact color matching.
								</p>
							</div>
						</div>
					{/if}
				</section>
			{/if}

			<!-- Empty State -->
			{#if !inputValue.trim()}
				<EmptyState />
			{/if}
		</main>

		<!-- Enhanced Footer with more SEO content -->
		<Footer />
	</div>
</div>



================================================
File: routes/+page.ts
================================================
import type { PageLoad } from './$types';

export const load: PageLoad = async ({ url }) => {
	// Extract color from URL if present for better SEO and sharing
	const searchParams = url.searchParams;
	const colorParam = searchParams.get('color');

	return {
		title: 'Tailwind Color Matcher - Convert Hex Colors to Tailwind CSS',
		description:
			"Find the closest Tailwind CSS color to any hex color code. Perfect for maintaining design consistency with Tailwind's color palette. Free online tool for developers and designers.",
		initialColor: colorParam || '',
		canonical: url.origin + url.pathname,
		// Add structured data for the page
		structuredData: {
			'@context': 'https://schema.org',
			'@type': 'WebApplication',
			name: 'Tailwind Color Matcher',
			description: 'Find the closest Tailwind CSS color to any hex color code',
			url: url.href,
			applicationCategory: 'DeveloperApplication',
			operatingSystem: 'Web Browser'
		}
	};
};

export const prerender = true;
export const ssr = true;



================================================
File: routes/page.svelte.spec.ts
================================================
import { page } from '@vitest/browser/context';
import { describe, expect, it } from 'vitest';
import { render } from 'vitest-browser-svelte';
import Page from './+page.svelte';

describe('/+page.svelte', () => {
	it('should render h1', async () => {
		render(Page);

		const heading = page.getByRole('heading', { level: 1 });
		await expect.element(heading).toBeInTheDocument();
	});
});



================================================
File: routes/about/+page.svelte
================================================
<script lang="ts">
	import { Palette, Zap, Target, Code, Heart, Github, ExternalLink } from 'lucide-svelte';
</script>

<svelte:head>
	<title>About Tailwind Color Matcher - How It Works & Features</title>
	<meta
		name="description"
		content="Learn how Tailwind Color Matcher works, its features, and the technology behind accurate color matching using perceptual color distance algorithms."
	/>
	<meta
		name="keywords"
		content="tailwind color matcher, color matching algorithm, LCH color space, Delta E, perceptual color distance, web development tools"
	/>
</svelte:head>

<div class="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
	<div class="container mx-auto max-w-4xl px-4 py-8">
		<!-- Header -->
		<header class="mb-12 text-center">
			<div class="mb-6 flex items-center justify-center gap-3">
				<div class="rounded-xl bg-gradient-to-br from-blue-500 to-purple-600 p-3">
					<Palette class="h-8 w-8 text-white" />
				</div>
				<h1 class="text-4xl font-bold text-gray-900">About Tailwind Color Matcher</h1>
			</div>
			<p class="mx-auto max-w-2xl text-xl text-gray-600">
				Learn how our advanced color matching algorithm helps you find the perfect Tailwind CSS
				colors
			</p>
		</header>

		<main class="space-y-12">
			<!-- How It Works -->
			<section class="rounded-xl border border-gray-200 bg-white p-8 shadow-sm">
				<div class="mb-6 flex items-center gap-3">
					<Zap class="h-6 w-6 text-blue-500" />
					<h2 class="text-2xl font-bold text-gray-900">How It Works</h2>
				</div>

				<div class="grid gap-8 md:grid-cols-2">
					<div>
						<h3 class="mb-3 text-lg font-semibold text-gray-900">Advanced Color Science</h3>
						<p class="mb-4 text-gray-600">
							Our tool uses the <strong>LCH color space</strong> and
							<strong>Delta E algorithms</strong>
							to calculate perceptual color differences. Unlike simple RGB distance calculations, this
							approach matches how humans actually perceive color differences.
						</p>
						<ul class="space-y-2 text-sm text-gray-600">
							<li>• <strong>LCH Color Space:</strong> Perceptually uniform color representation</li>
							<li>
								• <strong>Delta E Calculation:</strong> Industry-standard color difference metric
							</li>
							<li>• <strong>Chroma.js Integration:</strong> Robust color manipulation library</li>
						</ul>
					</div>

					<div>
						<h3 class="mb-3 text-lg font-semibold text-gray-900">Matching Process</h3>
						<ol class="space-y-3 text-sm text-gray-600">
							<li class="flex items-start gap-2">
								<span
									class="flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-full bg-blue-100 text-xs font-semibold text-blue-600"
									>1</span
								>
								<span>Input color is validated and normalized</span>
							</li>
							<li class="flex items-start gap-2">
								<span
									class="flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-full bg-blue-100 text-xs font-semibold text-blue-600"
									>2</span
								>
								<span>Color is converted to LCH color space</span>
							</li>
							<li class="flex items-start gap-2">
								<span
									class="flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-full bg-blue-100 text-xs font-semibold text-blue-600"
									>3</span
								>
								<span>Distance calculated against all Tailwind colors</span>
							</li>
							<li class="flex items-start gap-2">
								<span
									class="flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-full bg-blue-100 text-xs font-semibold text-blue-600"
									>4</span
								>
								<span>Results sorted by perceptual similarity</span>
							</li>
						</ol>
					</div>
				</div>
			</section>

			<!-- Features -->
			<section class="rounded-xl border border-gray-200 bg-white p-8 shadow-sm">
				<div class="mb-6 flex items-center gap-3">
					<Target class="h-6 w-6 text-green-500" />
					<h2 class="text-2xl font-bold text-gray-900">Key Features</h2>
				</div>

				<div class="grid gap-6 md:grid-cols-3">
					<div class="p-4 text-center">
						<div
							class="mx-auto mb-3 flex h-12 w-12 items-center justify-center rounded-lg bg-blue-100"
						>
							<Palette class="h-6 w-6 text-blue-600" />
						</div>
						<h3 class="mb-2 font-semibold text-gray-900">Accurate Matching</h3>
						<p class="text-sm text-gray-600">
							Uses perceptual color distance for matches that look right to the human eye
						</p>
					</div>

					<div class="p-4 text-center">
						<div
							class="mx-auto mb-3 flex h-12 w-12 items-center justify-center rounded-lg bg-green-100"
						>
							<Zap class="h-6 w-6 text-green-600" />
						</div>
						<h3 class="mb-2 font-semibold text-gray-900">Instant Results</h3>
						<p class="text-sm text-gray-600">
							Real-time color matching with immediate visual feedback and multiple options
						</p>
					</div>

					<div class="p-4 text-center">
						<div
							class="mx-auto mb-3 flex h-12 w-12 items-center justify-center rounded-lg bg-purple-100"
						>
							<Code class="h-6 w-6 text-purple-600" />
						</div>
						<h3 class="mb-2 font-semibold text-gray-900">Developer Friendly</h3>
						<p class="text-sm text-gray-600">
							Copy class names, hex values, and share specific color matches via URL
						</p>
					</div>
				</div>
			</section>

			<!-- Technology Stack -->
			<section class="rounded-xl border border-gray-200 bg-white p-8 shadow-sm">
				<div class="mb-6 flex items-center gap-3">
					<Code class="h-6 w-6 text-purple-500" />
					<h2 class="text-2xl font-bold text-gray-900">Technology Stack</h2>
				</div>

				<div class="grid gap-8 md:grid-cols-2">
					<div>
						<h3 class="mb-4 text-lg font-semibold text-gray-900">Frontend</h3>
						<ul class="space-y-2 text-gray-600">
							<li class="flex items-center gap-2">
								<span class="h-2 w-2 rounded-full bg-orange-500"></span>
								<strong>SvelteKit 5:</strong> Modern web framework with SSR
							</li>
							<li class="flex items-center gap-2">
								<span class="h-2 w-2 rounded-full bg-blue-500"></span>
								<strong>TypeScript:</strong> Type-safe development
							</li>
							<li class="flex items-center gap-2">
								<span class="h-2 w-2 rounded-full bg-cyan-500"></span>
								<strong>Tailwind CSS:</strong> Utility-first styling
							</li>
							<li class="flex items-center gap-2">
								<span class="h-2 w-2 rounded-full bg-green-500"></span>
								<strong>Vite:</strong> Fast build tooling
							</li>
						</ul>
					</div>

					<div>
						<h3 class="mb-4 text-lg font-semibold text-gray-900">Libraries & Tools</h3>
						<ul class="space-y-2 text-gray-600">
							<li class="flex items-center gap-2">
								<span class="h-2 w-2 rounded-full bg-red-500"></span>
								<strong>Chroma.js:</strong> Color manipulation and conversion
							</li>
							<li class="flex items-center gap-2">
								<span class="h-2 w-2 rounded-full bg-yellow-500"></span>
								<strong>Lucide Icons:</strong> Beautiful, consistent icons
							</li>
							<li class="flex items-center gap-2">
								<span class="h-2 w-2 rounded-full bg-indigo-500"></span>
								<strong>Vitest:</strong> Fast unit testing
							</li>
							<li class="flex items-center gap-2">
								<span class="h-2 w-2 rounded-full bg-pink-500"></span>
								<strong>Vercel:</strong> Deployment and hosting
							</li>
						</ul>
					</div>
				</div>
			</section>

			<!-- Open Source -->
			<section class="rounded-xl border border-gray-200 bg-white p-8 shadow-sm">
				<div class="mb-6 flex items-center gap-3">
					<Heart class="h-6 w-6 text-red-500" />
					<h2 class="text-2xl font-bold text-gray-900">Open Source</h2>
				</div>

				<div class="text-center">
					<p class="mx-auto mb-6 max-w-2xl text-gray-600">
						Tailwind Color Matcher is open source and available on GitHub. Contributions, bug
						reports, and feature requests are welcome!
					</p>

					<div class="flex items-center justify-center gap-4">
						<a
							href="https://github.com/ShreyPurohit/color-matcher"
							target="_blank"
							rel="noopener noreferrer"
							class="flex items-center gap-2 rounded-lg bg-gray-900 px-6 py-3 text-white transition-colors hover:bg-gray-800"
						>
							<Github class="h-5 w-5" />
							View on GitHub
						</a>

						<a
							href="https://github.com/ShreyPurohit/color-matcher/issues"
							target="_blank"
							rel="noopener noreferrer"
							class="flex items-center gap-2 rounded-lg border border-gray-300 px-6 py-3 text-gray-700 transition-colors hover:bg-gray-50"
						>
							<ExternalLink class="h-5 w-5" />
							Report Issues
						</a>
					</div>
				</div>
			</section>

			<!-- Creator -->
			<section class="rounded-xl border border-gray-200 bg-white p-8 shadow-sm">
				<div class="text-center">
					<h2 class="mb-4 text-2xl font-bold text-gray-900">Created by Shrey Purohit</h2>
					<p class="mx-auto mb-6 max-w-2xl text-gray-600">
						A passionate web developer focused on creating useful tools for the developer community.
						Interested in color science, web performance, and user experience.
					</p>

					<div class="flex items-center justify-center gap-4">
						<a
							href="https://github.com/ShreyPurohit"
							target="_blank"
							rel="noopener noreferrer"
							class="flex items-center gap-2 text-gray-600 transition-colors hover:text-gray-900"
						>
							<Github class="h-5 w-5" />
							@ShreyPurohit
						</a>
					</div>
				</div>
			</section>
		</main>
	</div>
</div>



================================================
File: routes/about/+page.ts
================================================
import type { PageLoad } from './$types';

export const load: PageLoad = async () => {
	return {
		title: 'About Tailwind Color Matcher - How It Works & Features',
		description:
			'Learn how Tailwind Color Matcher works, its features, and the technology behind accurate color matching using perceptual color distance algorithms.'
	};
};

export const prerender = true;
export const ssr = true;



================================================
File: routes/robots.txt/+server.ts
================================================
import type { RequestHandler } from './$types';

export const GET: RequestHandler = async ({ url }) => {
	const baseUrl = url.origin;

	const robots = `User-agent: *
Allow: /

# Sitemap
Sitemap: ${baseUrl}/sitemap.xml

# Crawl-delay for respectful crawling
Crawl-delay: 1

# Allow all major search engines
User-agent: Googlebot
Allow: /

User-agent: Bingbot
Allow: /

User-agent: Slurp
Allow: /

User-agent: DuckDuckBot
Allow: /

# Block AI training crawlers if desired (optional)
User-agent: GPTBot
Disallow: /

User-agent: ChatGPT-User
Disallow: /

User-agent: CCBot
Disallow: /

User-agent: anthropic-ai
Disallow: /

User-agent: Claude-Web
Disallow: /`;

	return new Response(robots, {
		headers: {
			'Content-Type': 'text/plain',
			'Cache-Control': 'max-age=86400'
		}
	});
};

export const prerender = true;



================================================
File: routes/sitemap.xml/+server.ts
================================================
import type { RequestHandler } from './$types';

export const GET: RequestHandler = async ({ url }) => {
	const baseUrl = url.origin;

	// Generate sitemap with all important pages
	const sitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
        xmlns:news="http://www.google.com/schemas/sitemap-news/0.9"
        xmlns:xhtml="http://www.w3.org/1999/xhtml"
        xmlns:mobile="http://www.google.com/schemas/sitemap-mobile/1.0"
        xmlns:image="http://www.google.com/schemas/sitemap-image/1.1"
        xmlns:video="http://www.google.com/schemas/sitemap-video/1.1">
	<url>
		<loc>${baseUrl}/</loc>
		<lastmod>${new Date().toISOString()}</lastmod>
		<changefreq>weekly</changefreq>
		<priority>1.0</priority>
	</url>
	<url>
		<loc>${baseUrl}/about/</loc>
		<lastmod>${new Date().toISOString()}</lastmod>
		<changefreq>monthly</changefreq>
		<priority>0.8</priority>
	</url>
	<url>
		<loc>${baseUrl}/api/</loc>
		<lastmod>${new Date().toISOString()}</lastmod>
		<changefreq>monthly</changefreq>
		<priority>0.6</priority>
	</url>
</urlset>`;

	return new Response(sitemap, {
		headers: {
			'Content-Type': 'application/xml',
			'Cache-Control': 'max-age=3600'
		}
	});
};

export const prerender = true;


